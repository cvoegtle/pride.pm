/*******************************************************************************
 * Copyright (c) 2001-2019 The PriDE team
 *******************************************************************************/
package pm.pride.util.generator;

import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

import pm.pride.*;
import pm.pride.util.ArgReader;
import pm.pride.util.ArgumentException;

/**
 * Generator for stored procedure access classes. This generator
 * works for Oracle databases only, due to the vendor-specific
 * structure of SP meta data.
 *
 * @author <a href="mailto:jan.lessner@mathema.de">Jan Lessner</a>
 */
public class StoredProcedureGenerator
{
    protected static final String IN = "IN";
    protected static final String OUT = "OUT";
    protected static final String INOUT = "INOUT";

    protected String pack, proc, cls, javaPackage;

    protected String[] memberExcludeList() { return null; }
    
    public void generatePackageAndImports(PrintStream out) {
    	if (javaPackage != null) {
            out.println("package " + javaPackage + ";\n");
    	}
        out.println("import java.sql.Date;\n");
    }

    public void generateClassHeader(PrintStream out) {
        out.println("/** Generated by Stored Procedure Generator, " + new java.util.Date() + " */");
        out.println("class " + cls + " extends StoredProcedure\n{");
    }

    public String sql2javaType(AllArguments arg) throws Exception {
        if (arg.getDataType().equals("NUMBER")) return (arg.getDataLength() != null && arg.getDataLength().intValue() < 5) ? "int" : "long";
        if (arg.getDataType().equals("VARCHAR")) return "String";
        if (arg.getDataType().equals("VARCHAR2")) return "String";
        if (arg.getDataType().equals("NVARCHAR2")) return "String";
        if (arg.getDataType().equals("DATE")) return "Date";
        return null;
    }
    
    public String sql2javaMember(AllArguments arg) {
    	String name = arg.getArgumentName().toLowerCase();
        StringBuffer javaMember = new StringBuffer();
        boolean nextUpper = false;
        
        name = name.toLowerCase();
        for (int i = 0; i < name.length(); i++) {
            if (name.charAt(i) == '_')
                nextUpper = true;
            else {
                if (nextUpper) {
                    javaMember.append(Character.toUpperCase(name.charAt(i)));
                    nextUpper = false;
                }
                else
                    javaMember.append(name.charAt(i));
            }
        }
        return javaMember.toString();
    }

    public void generateMember(PrintStream out, AllArguments arg) throws Exception {
        out.print("    public ");
        if (arg.getInOut().equals(IN))
            out.print("final ");
        out.print(sql2javaType(arg) + " " + sql2javaMember(arg) + ";\n");
    }
    
    private boolean memberExcluded(String name) {
        String[] excludeList = memberExcludeList();
        if (excludeList != null) {
            for (int i = 0; i < excludeList.length; i++) {
                if (name.equals(excludeList[i]))
                    return true;
            }
        }
        return false;
	}

	public List<AllArguments> queryParameters() throws Exception {
        AllArguments args = new AllArguments();
        args.setObjectName(proc);
        args.setPackageName(pack);
        String[] queryFields = (pack == null) ?
            new String[] { "object_name" } :
            new String[] { "object_name", "package_name" };
        
        String constraint = args.constraint( queryFields );
        ResultIterator iter = args.query(constraint + " order by position");
        pack = args.getPackageName();
        return iter.stream(AllArguments.class)
        	.filter((a) -> !memberExcluded(a.getArgumentName()))
        	.collect(Collectors.toList());
    }

	public void generateMembers(PrintStream out, List<AllArguments> parameters) throws Exception {
		for (AllArguments args: parameters) {
            generateMember(out, args);
        }
    }

    public void generateName(PrintStream out) {
        out.println("    protected String getName() { return \"" +
                    ((pack == null) ? "" : (pack + ".")) + proc + "\"; }\n");
    }

    public void generateCtor(PrintStream out, List<AllArguments> parameters) throws Exception {
        out.print("    public " + cls + "(");
        boolean firstArg = true;
        for (AllArguments arg: parameters) {
            if (arg.getInOut().equals(IN)) {
            	if (!firstArg) {
            		out.print(", ");
            	}
            	else {
            		firstArg = false;
            	}
            	out.print(sql2javaType(arg) + " " + sql2javaMember(arg));
            }
        }
        out.println(") {");
        for (AllArguments arg: parameters) {
            if (arg.getInOut().equals(IN)) {
            	out.println("        this." + sql2javaMember(arg) + " = " + sql2javaMember(arg) + ";");
            }
        }
        out.println("    }\n");
    }

    public void generateClassTrailer(PrintStream out) {
        out.println("}");
    }
    
    public void generate() throws Exception {
        PrintStream out = System.out;
        generatePackageAndImports(out);
        generateClassHeader(out);
        List<AllArguments> parameters = queryParameters();
        generateMembers(out, parameters);
        generateName(out);
        generateCtor(out, parameters);
        generateClassTrailer(out);
    }
    
    public static void error(String message) {
        System.out.println(message);
        System.exit(1);
    }

    public static void help() {
    }

    public StoredProcedureGenerator(String[] args) throws Exception {
        ArgReader argReader = new ArgReader(args, "p:s:c:");
        Properties props = new Properties();
        char option = ArgReader.ARGEND;
        
        do {
            try {
                switch(option = argReader.getArg()) {
                case 'p':
                    pack = argReader.getArgValue();
                    break;
                case 's':
                    proc = argReader.getArgValue();
                    break;
                case 'c':
                    cls = argReader.getArgValue();
                    break;
                }
            }
            catch(ArgumentException ax) {
                System.out.println(ax.getMessage());
                help();
            }
        } while (option != ArgReader.ARGEND);

        if (proc == null)
            error("Missing stored procedure name");
        if (cls == null) {
            cls = proc;
        }
        else {
        	int dot = cls.lastIndexOf(".");
        	if (dot != -1) {
        		javaPackage = cls.substring(0, dot);
        		cls = cls.substring(dot+1);
        	}
        	
        }
        ResourceAccessorJSE.fromSystemProps();
    }
    
    public static void main(String[] args) throws Exception {
        new StoredProcedureGenerator(args).generate();
    }

}
